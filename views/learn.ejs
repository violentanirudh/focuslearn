<!DOCTYPE html>
<html lang="en">
<%- include('./partials/head') %>
<body class="bg-[url('/public/background.png')] bg-cover bg-no-repeat bg-scroll text-white py-10 px-2 max-w-screen-xl mx-auto">
    
    <%- include('partials/navigation') %>
    <div class="fixed inset-0 flex justify-center items-center p-10 grow bg-black/10 hidden" id="lectures">
      <div class="bg-gray-950/90  backdrop-blur-xl rounded-lg h-full self-start shadow-lg max-w-screen-xl w-full flex flex-col py-6">
      <div class="flex px-6 justify-between text-white">
        <h2>Course Content</h2>
        <button class="" onclick="document.getElementById('lectures').classList.toggle('hidden')">
        <i data-feather="x"></i>
        </button>
      </div>
      
      <!-- Course overview -->
      <p class="px-6 mb-4 text-gray-300"><%= course.overview %></p>
      
      <!-- Lectures content with top and bottom inset shadow -->
      <div id="lectures-content" class="flex-1 w-full overflow-y-scroll" style="box-shadow: inset 0 10px 8px -8px rgba(0, 0, 0, 0.5), inset 0 -10px 8px -8px rgba(0, 0, 0, 0.5);">
        <!-- Lectures will be dynamically inserted here -->
      </div>
      
      <!-- Bottom navigation buttons (Previous and Next) -->
      <div class="flex justify-end mt-4 px-6 gap-4">
        <button class="py-2 px-6 font-medium border-2 border-gray-600 bg-gray-700 text-white rounded">Previous</button>
        <button class="py-2 px-6 font-medium border-2 border-gray-600 bg-gray-700 text-white rounded">Next</button>
      </div>
      </div>
    </div>
    
  
  <!-- Main Content -->
  <div class="space-y-4">
      <!-- Video Player and Description -->

    <iframe id="lecture-video" class="w-full h-full aspect-video rounded-lg shadow-xl block" 
      frameborder="0" 
      allow="autoplay; encrypted-media"
      allowfullscreen>
    </iframe>

    <div class="flex justify-between gap-4 items-center">

      <p class="text-xl font-medium truncate w-3/4 text-white" id="lecture-title"></p>

      <div class="flex gap-4">

        <button class="py-2 px-6 font-medium border-2 bg-blue-600 border-black rounded">
          Notes
        </button>

        <div class="bg-blue-600 flex border-2 divide-x-2 border-black divide-black rounded">
          <button class="p-2" onclick="changeLectureNavigation('previous')"><i data-feather="chevron-left"></i></button>
          <button class="p-2 px-4 font-medium" onclick="toggleCourseContent()">Lectures</button>
          <button class="p-2" onclick="changeLectureNavigation('next')"><i data-feather="chevron-right"></i></button>
        </div>

      </div>

      <span class="invisible"></span>

    </div>

  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/feather-icons/4.29.0/feather.min.js"></script>
  <script>
    feather.replace();

    let currentLecture = null;
    let currentLectureNavigation = null;
    let courseData = null;

    async function fetchCourseDetails() {
      try {
        const response = await fetch('http://127.0.0.1:3000/public/courses/content/<%= course.playlistId %>.json');
        courseData = await response.json();

        const lecturesElement = document.querySelector('#lectures-content');
        lecturesElement.innerHTML = `
            <ul class="font-medium py-2 text-white">
            ${courseData.course.lectures.map((lecture, index) => `
              <li class="flex items-center justify-between px-4 py-2 cursor-pointer hover:bg-gray-800" onclick="changeLecture(${index})">
              <div class="flex items-center w-2/3">
                <span class="text-slate-400 mr-3">
                <i data-feather="play-circle" class="h-6 w-6"></i>
                </span>
                <span class="truncate">${String(index + 1).padStart(2, '0')}. ${lecture.title}</span>
              </div>
              <span class="text-sm">${Math.floor(lecture.duration / 60)} min</span>
              </li>
            `).join('')}
            </ul>
        `;

        // http://127.0.0.1:3000/learn/PLinedj3B30sDby4Al-i13hQJGQoRQDfPo?lecture=2
        const urlParams = new URLSearchParams(window.location.search);
        const lectureIndex = urlParams.has('lecture') ? parseInt(urlParams.get('lecture')) : 0;
        changeLecture(lectureIndex, false);

      } catch (err) {
        console.error(err);
        const lecturesElement = document.querySelector('#lectures-content');
        lecturesElement.innerHTML = `
          <div class="text-center text-red-600">
            <p>Failed to load lectures. Please try again later.</p>
          </div>
        `;
      }

      feather.replace();

    }

    function changeLecture(index, close=true) {
      currentLecture = courseData.course.lectures[index];
      currentLectureNavigation = index
      if (close) document.getElementById('lectures').classList.toggle('hidden')
      updateLectureContent();
    }

    function updateLectureContent() {
      if (currentLecture) {
      const url = currentLecture.embed.replace('https://www.youtube.com/', 'https://www.youtube-nocookie.com/');
      console.log(url);
      document.getElementById('lecture-video').src = url + '?autoplay=0&mute=0&controls=1&playsinline=1&showinfo=0&rel=0&iv_load_policy=3&modestbranding=1&enablejsapi=1&widgetid=1';
      document.getElementById('lecture-title').textContent = currentLecture.title;

      // Add event listener to track video progress
      const iframe = document.getElementById('lecture-video');
      iframe.onload = function() {
        const player = new YT.Player(iframe, {
        events: {
          'onStateChange': onPlayerStateChange
        }
        });
      };
      }
    }

    function onPlayerStateChange(event) {
      if (event.data == YT.PlayerState.PLAYING) {
      const duration = event.target.getDuration();
      const watchTime = duration * 0.9;

      setTimeout(() => {
        if (event.target.getPlayerState() == YT.PlayerState.PLAYING) {
        sendProgressUpdate();
        }
      }, watchTime * 1000);
      }
    }

    function sendProgressUpdate() {
      fetch('/progress', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ currentLectureIndex: courseData.course.lectures.indexOf(currentLecture) })
      })
      .then(response => response.json())
      .then(data => console.log('Progress updated:', data))
      .catch(error => console.error('Error updating progress:', error));
    }

    function toggleCourseContent() {
      document.querySelector('#lectures').classList.toggle('hidden');
    }

    function changeLectureNavigation(direction) {
      if (direction === 'next') {
        currentLectureNavigation++;
      } else {
        currentLectureNavigation--;
      }

      if (currentLectureNavigation < 0) {
        currentLectureNavigation = 0;
      } else if (currentLectureNavigation >= courseData.course.lectures.length) {
        currentLectureNavigation = courseData.course.lectures.length - 1;
      }

      changeLecture(currentLectureNavigation, false);
    }

    fetchCourseDetails();
  </script>
</body>
</html>