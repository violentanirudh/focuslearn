{
  "questions": [
    {
      "question": "What is NodeJS primarily used for?",
      "answer": "option2",
      "option1": "Building desktop applications",
      "option2": "Building server-side applications",
      "option3": "Developing mobile games"
    },
    {
      "question": "Which command is used to install NodeJS on your system?",
      "answer": "option1",
      "option1": "npm install nodejs",
      "option2": "apt-get install nodejs",
      "option3": "pip install nodejs"
    },
    {
      "question": "What is the traditional first program written in any programming language?",
      "answer": "option2",
      "option1": "Print 'Hello World' to the console",
      "option2": "Display 'Hello World' on the screen",
      "option3": "Create a simple calculator"
    },
    {
      "question": "What is the purpose of modules in NodeJS?",
      "answer": "option1",
      "option1": "To organize code into reusable units",
      "option2": "To manage dependencies within a project",
      "option3": "To enhance security in NodeJS applications"
    },
    {
      "question": "What is the primary function of the 'fs' module in NodeJS?",
      "answer": "option1",
      "option1": "Interacting with the file system",
      "option2": "Creating and managing databases",
      "option3": "Handling network requests"
    },
    {
      "question": "Which statement best describes how NodeJS works?",
      "answer": "option1",
      "option1": "It uses a single-threaded, event-driven architecture",
      "option2": "It employs a multi-threaded approach for processing requests",
      "option3": "It relies on a traditional request-response model"
    },
    {
      "question": "What is the primary purpose of creating an HTTP server in NodeJS?",
      "answer": "option1",
      "option1": "To handle incoming network requests and provide responses",
      "option2": "To manage user authentication and authorization",
      "option3": "To store and retrieve data from a database"
    },
    {
      "question": "How are URL's handled in NodeJS?",
      "answer": "option2",
      "option1": "Through a built-in URL parsing module",
      "option2": "By extracting information from the request object",
      "option3": "Using a separate routing library"
    },
    {
      "question": "Which of the following is NOT a standard HTTP method?",
      "answer": "option3",
      "option1": "GET",
      "option2": "POST",
      "option3": "SUBMIT"
    },
    {
      "question": "What is Express.js primarily used for in NodeJS development?",
      "answer": "option1",
      "option1": "Building web applications",
      "option2": "Managing databases",
      "option3": "Handling user authentication"
    },
    {
      "question": "How does versioning work in NodeJS?",
      "answer": "option1",
      "option1": "Using the 'npm' package manager",
      "option2": "Through a centralized version control system",
      "option3": "By manually managing different versions of code"
    },
    {
      "question": "What is the key concept behind REST APIs?",
      "answer": "option1",
      "option1": "Representational State Transfer",
      "option2": "Remote Server Technology",
      "option3": "Relational Server Transfer"
    },
    {
      "question": "Which library is commonly used to build REST APIs with NodeJS?",
      "answer": "option2",
      "option1": "Axios",
      "option2": "Express.js",
      "option3": "Socket.IO"
    },
    {
      "question": "What is the primary function of POSTMAN?",
      "answer": "option1",
      "option1": "Testing and interacting with REST APIs",
      "option2": "Building web applications",
      "option3": "Managing databases"
    },
    {
      "question": "What is the purpose of middleware in Express.js?",
      "answer": "option1",
      "option1": "To intercept and modify requests before they reach the final handler",
      "option2": "To manage user authentication",
      "option3": "To handle database interactions"
    },
    {
      "question": "What is the purpose of HTTP headers in APIs?",
      "answer": "option1",
      "option1": "To provide additional information about the request or response",
      "option2": "To define the structure of data sent in the request or response",
      "option3": "To encrypt data for security purposes"
    },
    {
      "question": "What does a 404 status code indicate in an HTTP response?",
      "answer": "option2",
      "option1": "Successful request",
      "option2": "Resource not found",
      "option3": "Server error"
    },
    {
      "question": "What is MongoDB primarily used for?",
      "answer": "option1",
      "option1": "Storing and retrieving data in a document-oriented database",
      "option2": "Building web applications",
      "option3": "Managing user authentication"
    },
    {
      "question": "What is Mongoose used for in NodeJS?",
      "answer": "option1",
      "option1": "Providing an object-oriented interface to interact with MongoDB",
      "option2": "Building REST APIs",
      "option3": "Managing user sessions"
    },
    {
      "question": "What is the MVC pattern?",
      "answer": "option1",
      "option1": "A software design pattern separating concerns into Model, View, and Controller",
      "option2": "A method for handling user authentication",
      "option3": "A way to manage database interactions"
    },
    {
      "question": "What is the main purpose of creating a custom URL shortener?",
      "answer": "option1",
      "option1": "To create shorter and more memorable links",
      "option2": "To enhance website security",
      "option3": "To improve website performance"
    },
    {
      "question": "What is the primary purpose of Server-Side Rendering (SSR) with EJS and NodeJS?",
      "answer": "option1",
      "option1": "Generating HTML content on the server for better SEO and faster initial page load",
      "option2": "Managing user authentication",
      "option3": "Handling database interactions"
    },
    {
      "question": "What is the primary goal of building Node.js authentication from scratch?",
      "answer": "option1",
      "option1": "To secure access to sensitive resources based on user identity",
      "option2": "To enhance website performance",
      "option3": "To manage user sessions"
    },
    {
      "question": "What is JWT authentication?",
      "answer": "option1",
      "option1": "A stateless authentication method using JSON Web Tokens",
      "option2": "A database-based authentication approach",
      "option3": "A session-based authentication method"
    },
    {
      "question": "What are cookies primarily used for in NodeJS?",
      "answer": "option1",
      "option1": "Storing user information on the client's browser",
      "option2": "Managing user authentication",
      "option3": "Handling database interactions"
    },
    {
      "question": "What is authorization in NodeJS?",
      "answer": "option1",
      "option1": "Controlling access to specific resources based on user permissions",
      "option2": "Managing user authentication",
      "option3": "Handling database interactions"
    },
    {
      "question": "What is the primary purpose of creating a Discord bot?",
      "answer": "option1",
      "option1": "To automate tasks and interact with the Discord platform",
      "option2": "To build web applications",
      "option3": "To manage user authentication"
    },
    {
      "question": "What is the Multer library used for in NodeJS?",
      "answer": "option1",
      "option1": "Handling file uploads",
      "option2": "Managing user authentication",
      "option3": "Handling database interactions"
    },
    {
      "question": "What is the primary goal of setting up a NodeJS blogging application with MongoDB?",
      "answer": "option1",
      "option1": "To create a platform for users to publish and share blog posts",
      "option2": "To build a social media platform",
      "option3": "To develop an e-commerce website"
    },
    {
      "question": "What is the primary focus of authentication in a NodeJS blogging application?",
      "answer": "option1",
      "option1": "Verifying user identity and granting access to specific actions",
      "option2": "Managing user profiles",
      "option3": "Handling user interactions with blog posts"
    },
    {
      "question": "What is the purpose of deploying a NodeJS application on AWS?",
      "answer": "option1",
      "option1": "To make the application accessible to users on the internet",
      "option2": "To manage user authentication",
      "option3": "To handle database interactions"
    },
    {
      "question": "What is WebSocket technology primarily used for?",
      "answer": "option1",
      "option1": "Enabling real-time communication between client and server",
      "option2": "Building web applications",
      "option3": "Managing user authentication"
    },
    {
      "question": "What is the main purpose of NodeJS Streams?",
      "answer": "option1",
      "option1": "To process data in a sequential and efficient manner",
      "option2": "To manage user authentication",
      "option3": "To handle database interactions"
    },
    {
      "question": "How does the 'cluster' module help scale NodeJS applications?",
      "answer": "option1",
      "option1": "By creating multiple worker processes to handle requests concurrently",
      "option2": "By optimizing database queries",
      "option3": "By caching frequently accessed data"
    },
    {
      "question": "What is Nginx primarily used for?",
      "answer": "option1",
      "option1": "Serving web content and acting as a reverse proxy",
      "option2": "Building web applications",
      "option3": "Managing user authentication"
    },
    {
      "question": "What is the primary purpose of installing and setting up Nginx?",
      "answer": "option1",
      "option1": "To efficiently handle web traffic and improve website performance",
      "option2": "To manage user authentication",
      "option3": "To handle database interactions"
    },
    {
      "question": "What is the key function of Nginx when serving static content?",
      "answer": "option1",
      "option1": "Delivering files directly from the server without processing them",
      "option2": "Dynamically generating content on the fly",
      "option3": "Managing user authentication"
    },
    {
      "question": "What are the main components of a full Node.js deployment using Nginx?",
      "answer": "option1",
      "option1": "Nginx as a reverse proxy, Node.js application server, and SSL with Let's Encrypt",
      "option2": "A database server, a web application server, and a user authentication system",
      "option3": "A front-end framework, a back-end framework, and a database management system"
    },
    {
      "question": "What is the primary goal of using a Serverless Framework with NodeJS?",
      "answer": "option1",
      "option1": "To deploy and manage serverless functions without managing infrastructure",
      "option2": "To enhance website performance",
      "option3": "To manage user authentication"
    },
    {
      "question": "What is the key difference between Serverless and Monolith architectures?",
      "answer": "option1",
      "option1": "Serverless breaks down applications into smaller, independent functions, while monoliths are single, large applications",
      "option2": "Serverless is more secure, while monoliths are more scalable",
      "option3": "Serverless is more expensive, while monoliths are more complex to maintain"
    },
    {
      "question": "What is AWS Lambda primarily used for in the Serverless context?",
      "answer": "option1",
      "option1": "Running serverless functions in response to events",
      "option2": "Managing user authentication",
      "option3": "Handling database interactions"
    },
    {
      "question": "What is the core concept behind GraphQL?",
      "answer": "option1",
      "option1": "A query language for APIs that allows clients to request specific data",
      "option2": "A framework for building web applications",
      "option3": "A database management system"
    },
    {
      "question": "What is the purpose of building a GraphQL clone of the Threads app?",
      "answer": "option1",
      "option1": "To demonstrate the implementation of GraphQL for social media applications",
      "option2": "To create a competitive social media platform",
      "option3": "To enhance the functionality of the existing Threads app"
    },
    {
      "question": "What are the key steps involved in setting up a GraphQL server?",
      "answer": "option1",
      "option1": "Defining a schema, creating resolvers, and configuring the server",
      "option2": "Building a database, creating a web application, and managing user authentication",
      "option3": "Installing dependencies, running migrations, and deploying the application"
    },
    {
      "question": "What is the primary function of Prisma in a GraphQL setup?",
      "answer": "option1",
      "option1": "Providing an ORM for interacting with databases from GraphQL resolvers",
      "option2": "Building web applications",
      "option3": "Managing user authentication"
    },
    {
      "question": "What are the main benefits of refactoring GraphQL code?",
      "answer": "option1",
      "option1": "Improving code readability, maintainability, and performance",
      "option2": "Enhancing security and reducing development time",
      "option3": "Increasing the complexity of the application"
    },
    {
      "question": "What is the key challenge in implementing authentication with a GraphQL server?",
      "answer": "option1",
      "option1": "Securing sensitive data and controlling access to resources",
      "option2": "Building a user interface",
      "option3": "Managing database connections"
    },
    {
      "question": "How is JWT authentication typically used with GraphQL?",
      "answer": "option1",
      "option1": "By generating and verifying JWTs within the context of GraphQL requests",
      "option2": "By using a separate authentication service",
      "option3": "By relying on session-based authentication"
    }
  ]
}
