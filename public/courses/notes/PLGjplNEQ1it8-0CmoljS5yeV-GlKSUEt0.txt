## Python Full Course Notes

**Lecture 1: Variables & Data Types**

* **Variables:** Containers for storing data. 
    * Declared using `variable_name = value`
    * Example: `name = "Alice"` 
    * Can store different data types.
* **Data Types:**
    * **Integer (int):** Whole numbers (e.g., 10, -5, 0)
    * **Float (float):** Numbers with decimal points (e.g., 3.14, -2.5)
    * **String (str):** Text enclosed in single or double quotes (e.g., "Hello", 'World')
    * **Boolean (bool):** True or False values
* **Examples:**
    ```python
    age = 25  # int
    price = 19.99  # float
    message = "Welcome!"  # str
    is_active = True  # bool
    ```

**Lecture 2: Strings & Conditional Statements**

* **Strings:**
    * Concatenation: Joining strings using `+` operator (e.g., `greeting = "Hello" + " " + "World"`)
    * Indexing: Accessing individual characters using square brackets (e.g., `letter = "Hello"[0]`)
    * Slicing: Extracting substrings (e.g., `word = "Hello"[1:4]`)
    * Methods: `len()`, `upper()`, `lower()`, `find()`, `replace()`, etc.
* **Conditional Statements:**
    * **if:** Executes code block if a condition is true.
    * **elif:** Checks additional conditions if the previous ones are false.
    * **else:** Executes if none of the previous conditions are true.
* **Examples:**
    ```python
    name = "John"
    if name == "John":
        print("Hello John!")
    elif name == "Jane":
        print("Hello Jane!")
    else:
        print("Hello, stranger!")
    ```

**Lecture 3: List & Tuple in Python**

* **Lists:** Ordered, mutable collections of items.
    * Defined using square brackets: `[1, 2, 3, "apple", True]`
    * Can be modified, appended, and extended.
* **Tuples:** Ordered, immutable collections of items.
    * Defined using parentheses: `(1, 2, 3, "apple", True)`
    * Cannot be modified after creation.
* **Examples:**
    ```python
    fruits = ["apple", "banana", "cherry"]  # List
    colors = ("red", "green", "blue")  # Tuple
    ```

**Lecture 4: Dictionary & Set in Python**

* **Dictionaries:** Unordered collections of key-value pairs.
    * Defined using curly braces: `{"name": "Alice", "age": 30}`
    * Keys must be unique and immutable (strings, numbers, tuples).
* **Sets:** Unordered collections of unique elements.
    * Defined using curly braces: `{1, 2, 3, "apple"}`
    * Do not allow duplicates and have no indexing.
* **Examples:**
    ```python
    person = {"name": "Bob", "age": 25, "city": "New York"}  # Dictionary
    numbers = {1, 2, 3, 4, 4}  # Set (duplicates are removed)
    ```

**Lecture 5: Loops in Python**

* **while Loop:** Executes a code block repeatedly as long as a condition is true.
    * Example: 
    ```python
    count = 0
    while count < 5:
        print(count)
        count += 1
    ```
* **for Loop:** Iterates over a sequence (list, tuple, string, range).
    * Example:
    ```python
    for fruit in fruits:
        print(fruit)
    ```
* **range() Function:** Generates a sequence of numbers.
    * Example: 
    ```python
    for i in range(1, 11):
        print(i)
    ```

**Lecture 6: Functions & Recursion in Python**

* **Functions:** Blocks of reusable code that perform specific tasks.
    * Defined using `def` keyword:
    ```python
    def greet(name):
        print("Hello,", name)
    ```
    * Called using the function name: `greet("Alice")`
* **Recursion:** A function calling itself within its own definition.
    * Example:
    ```python
    def factorial(n):
        if n == 0:
            return 1
        else:
            return n * factorial(n-1)
    ```

**Lecture 7: File Input/Output in Python**

* **File Handling:**
    * Opening files: `file = open("filename.txt", "mode")`
        * Modes: "r" (read), "w" (write), "a" (append)
    * Reading: `file.read()`, `file.readline()`, `file.readlines()`
    * Writing: `file.write("text")`
    * Closing: `file.close()`
* **Example:**
    ```python
    with open("data.txt", "r") as file:
        content = file.read()
        print(content)
    ```

**Lecture 8: OOPS in Python | Object Oriented Programming | Classes & Objects**

* **Classes:** Blueprints for creating objects.
    * Example:
    ```python
    class Dog:
        def __init__(self, name, breed):
            self.name = name
            self.breed = breed

        def bark(self):
            print("Woof!")
    ```
* **Objects:** Instances of a class.
    * Example:
    ```python
    my_dog = Dog("Buddy", "Golden Retriever")
    my_dog.bark()  # Output: Woof!
    ```

**Lecture 9: OOPS Part 2 | Object Oriented Programming**

* **Inheritance:** Creating new classes based on existing ones.
    * Example:
    ```python
    class GoldenRetriever(Dog):
        def fetch(self):
            print("Fetching!")
    ```
* **Polymorphism:** Objects of different classes can respond to the same method call in different ways.
* **Encapsulation:** Hiding data and methods within a class to protect them from external access.
* **Abstraction:** Showing only the necessary details to the user, hiding the underlying complexity.